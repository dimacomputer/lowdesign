name: Deploy all sites to NAS

on:
  push:
    branches: [ "main" ]   # автодеплой с main

concurrency:
  group: deploy-to-nas
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    strategy:
      matrix:
        project: [ "malati", "lowdesign" ]   # добавишь сюда новые проекты

    steps:
      - name: Write SSH key & known_hosts
        env:
          NAS_KEY: ${{ secrets.NAS_KEY }}
          NAS_HOST: ${{ secrets.NAS_HOST }}
          NAS_PORT: ${{ secrets.NAS_PORT }}
        run: |
          set -eu
          umask 077
          mkdir -p ~/.ssh
          printf '%s\n' "$NAS_KEY" > ~/.ssh/id_nas
          chmod 600 ~/.ssh/id_nas
          ssh-keyscan -p "$NAS_PORT" "$NAS_HOST" >> ~/.ssh/known_hosts

      # (опционально) быстрая проверка соединения
      # - name: Debug SSH
      #   env:
      #     NAS_HOST: ${{ secrets.NAS_HOST }}
      #     NAS_PORT: ${{ secrets.NAS_PORT }}
      #     NAS_USER: ${{ secrets.NAS_USER }}
      #   run: |
      #     ssh -vvv -i ~/.ssh/id_nas -p "$NAS_PORT" -o StrictHostKeyChecking=accept-new \
      #       "$NAS_USER@$NAS_HOST" "echo connected"

      - name: Trigger pull on NAS
        env:
          NAS_HOST: ${{ secrets.NAS_HOST }}
          NAS_PORT: ${{ secrets.NAS_PORT }}
          NAS_USER: ${{ secrets.NAS_USER }}
          NAS_FORCED_COMMAND: ${{ secrets.NAS_FORCED_COMMAND }}
        run: |
          set -euo pipefail
          run_ssh() {
            ssh -i ~/.ssh/id_nas -o ConnectTimeout=10 -o StrictHostKeyChecking=accept-new \
                -p "$NAS_PORT" "$NAS_USER@$NAS_HOST" "$@"
          }
          echo "=== Deploying project: ${{ matrix.project }} ==="
          if [ "${NAS_FORCED_COMMAND:-false}" = "true" ]; then
            run_ssh exit 0
          else
            # ВАЖНО: передаём NAS_PROJECT внутрь удалённой сессии
            run_ssh "NAS_PROJECT=${{ matrix.project }} bash -lc '/volume1/web/${{ matrix.project }}/scripts/pull.sh'"
          fi